/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   requests-list-mixin.html
 */

/// <reference path="../polymer/types/lib/utils/mixin.d.ts" />

declare namespace ArcComponents {


  /**
   * A mixin to be used with elements that consumes lists of requests.
   * It implements event listeners related to requests data change.
   */
  function RequestsListMixin<T extends new (...args: any[]) => {}>(base: T): T & RequestsListMixinConstructor;

  interface RequestsListMixinConstructor {
    new(...args: any[]): RequestsListMixin;
  }

  interface RequestsListMixin {

    /**
     * The list of request to render.
     * It can be eirther saved, history or project items.
     */
    requests: Array<object|null>|null;

    /**
     * Computed value, true when the project has requests.
     */
    readonly hasRequests: boolean|null|undefined;

    /**
     * Requests list type. Can be one of:
     * - saved
     * - history
     * - project
     *
     * Depending on the the type request change event is handled differently.
     * For saved and history requests corresponding type is processed.
     * For project requests list only request that has project id in the
     * projects list is processed.
     *
     * This property must be set.
     */
    type: string|null|undefined;

    /**
     * Project datastore ID to display.
     * This should be set only when type is `project`
     */
    projectId: string|null|undefined;

    /**
     * Changes information density of list items.
     * By default it uses material's peper item with two lines (72px heigth)
     * Possible values are:
     *
     * - `default` or empty - regular list view
     * - `comfortable` - enables MD single line list item vie (52px heigth)
     * - `compact` - enables list that has 40px heigth (touch recommended)
     */
    listType: string|null|undefined;

    /**
     * Computed value if the list item should be consisted of two lines of
     * description.
     */
    readonly _hasTwoLines: boolean|null|undefined;

    /**
     * A project object associated with requests.
     * This is only valid when `type` is project. It is set automatically
     * when `readProjectRequests()` is called.
     */
    project: object|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Dispatches bubbling and composed custom event.
     * By default the event is cancelable until `cancelable` property is set to false.
     *
     * @param type Event type
     * @param detail A detail to set
     */
    _dispatch(type: String|null, detail: any|null): CustomEvent|null;

    /**
     * Handler for `request-object-deleted` event. Removes request from the list
     * if it existed.
     */
    _requestDeletedHandler(e: CustomEvent|null): void;

    /**
     * Removes an item from the list by given id.
     *
     * @param id Request ID to remove
     */
    _itemDeleted(id: String|null): void;

    /**
     * Removes a history item from the list by given id.
     *
     * @param id Request ID to remove
     */
    _historyItemDeleted(id: String|null): void;

    /**
     * Handler for `request-object-changed` custom event.
     * Depending on the `type` property it updates / adds / removes item from
     * the requests list.
     */
    _requestChangedHandler(e: CustomEvent|null): void;

    /**
     * Handles request change when type is project.
     *
     * @param request Changed request object.
     */
    _projectTypeChanged(request: object|null): void;

    /**
     * Checks if requests is related to current project.
     * `projectId` has to be set on the element.
     */
    _isProjectRequest(request: object|null): Boolean|null;

    /**
     * Handles request change when type is saved or history.
     *
     * @param request Changed request object.
     */
    _savedTypeChanged(request: object|null): void;

    /**
     * Handles request change when type is saved or history.
     *
     * @param request Changed request object.
     */
    _historyTypeChanged(request: object|null): void;

    /**
     * Appends "today" header to the item.
     *
     * @param item History document
     */
    _appendTodaysHeader(item: object|null): void;

    /**
     * Adds a new history item to the top of the list.
     *
     * @param item A history item to add
     */
    _unshiftHistoryItem(item: object|null): void;

    /**
     * Dispatches `project-read` custom event and returns it.
     *
     * @param id Project ID to read
     * @returns Disaptched custom event
     */
    _dispatchProjectRead(id: String|null): CustomEvent|null;

    /**
     * Dispatches `request-project-list` custom event and returns it.
     *
     * @param id Project ID
     * @returns Disaptched custom event
     */
    _dispatchProjectList(id: String|null): CustomEvent|null;

    /**
     * Dispatches `request-object-changed` custom event and returns it.
     *
     * @param type Request type, `saved` or `history`.
     * @param request Updated request to store.
     * @returns Disaptched custom event
     */
    _dispatchRequestChanged(type: String|null, request: object|null): CustomEvent|null;

    /**
     * A function to read request data for a project.
     *
     * @param projectId Project ID
     * @returns Promise.resolved to requests list.
     */
    readProjectRequests(projectId: String|null): Promise<any>|null;

    /**
     * Sorts requests list by `projectOrder` property
     */
    _legacySort(a: object|null, b: object|null): Number|null;

    /**
     * Updates requests in bulk opeartion.
     *
     * @param items [description]
     * @returns [description]
     */
    _updateBulk(items: any): any;

    /**
     * Sends the `request-object-changed` custom event for each request on the list.
     *
     * @param request Request object.
     * @returns Promise resolved when the request object is updated.
     */
    _updateRequest(request: object|null): Promise<any>|null;
    _computeHasRequests(length: any): any;

    /**
     * Computes value for `_hasTwoLines` property.
     *
     * @param listType Selected list type.
     */
    _computeHasTwoLines(listType: String|null): Boolean|null;

    /**
     * Updates icon size CSS variable and notifies resize on the list when
     * list type changes.
     */
    _updateListStyles(type: String|null): void;

    /**
     * Stores current order of requests in the project.
     * This shouls be only called wshen `project` property is set.
     */
    _persistRequestsOrder(): Promise<any>|null;

    /**
     * Tests if two arrays has the same order of ids (strings).
     *
     * @param a1 Array a
     * @param a2 Array b
     * @returns True when elements are ordered the same way.
     */
    _idsArrayEqual(a1: Array<String|null>|null, a2: Array<String|null>|null): Boolean|null;

    /**
     * Dispatches `project-object-changed` event to inform model to update
     * the data.
     *
     * @param project Data to store.
     */
    _dispatchProjectUpdate(project: object|null): Promise<any>|null;

    /**
     * Handler for the `project-object-changed` event.
     */
    _projectChanged(e: CustomEvent|null): void;
  }
}
